import React, { useState, useEffect } from 'react';

const Settings = () => {
  const [config, setConfig] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');
  const [activeTab, setActiveTab] = useState('spotify');
  
  useEffect(() => {
    loadConfig();
  }, []);

  const loadConfig = async () => {
    try {
      if (!window.electronAPI) {
        throw new Error('Electron API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      const loadedConfig = await window.electronAPI.config.get();
      setConfig(loadedConfig);
      setIsLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setError(error.message);
      setIsLoading(false);
    }
  };

  const saveConfig = async () => {
    setIsSaving(true);
    setError(null);
    setSuccessMessage('');

    try {
      const result = await window.electronAPI.config.save(config);
      if (result.success) {
        setSuccessMessage('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        setTimeout(() => setSuccessMessage(''), 3000);
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setError(error.message);
    } finally {
      setIsSaving(false);
    }
  };

  const handleInputChange = (path, value) => {
    setConfig(prev => {
      const newConfig = { ...prev };
      const keys = path.split('.');
      let current = newConfig;
      
      for (let i = 0; i < keys.length - 1; i++) {
        if (!current[keys[i]]) {
          current[keys[i]] = {};
        }
        current = current[keys[i]];
      }
      
      current[keys[keys.length - 1]] = value;
      return newConfig;
    });
  };

  const handleSpotifyAuth = async () => {
    try {
      const result = await window.electronAPI.spotify.auth();
      if (result.success) {
        setSuccessMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Spotify –∑–∞–ø—É—â–µ–Ω–∞. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ.');
        setTimeout(() => setSuccessMessage(''), 5000);
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Spotify:', error);
      setError(error.message);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center text-white">
          <div className="w-16 h-16 mx-auto border-4 border-white border-t-transparent rounded-full animate-spin mb-4" />
          <p className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</p>
        </div>
      </div>
    );
  }

  if (!config) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center text-white">
          <p className="text-xl text-red-400">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</p>
          <button 
            onClick={loadConfig}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  const tabs = [
    { id: 'spotify', name: 'Spotify', icon: 'üéµ' },
    { id: 'behavior', name: '–ü–æ–≤–µ–¥–µ–Ω–∏–µ', icon: '‚öôÔ∏è' },
    { id: 'ui', name: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', icon: 'üé®' },
    { id: 'hotkeys', name: '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏', icon: '‚å®Ô∏è' },
    { id: 'advanced', name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', icon: 'üîß' }
  ];

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="bg-gray-800 border-b border-gray-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold">Spotify Overlay Player - –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
          <div className="flex gap-2">
            <button
              onClick={saveConfig}
              disabled={isSaving}
              className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {isSaving ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
              )}
            </button>
          </div>
        </div>
        
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        {error && (
          <div className="mt-4 p-3 bg-red-600 rounded-lg text-sm">
            {error}
          </div>
        )}
        
        {successMessage && (
          <div className="mt-4 p-3 bg-green-600 rounded-lg text-sm">
            {successMessage}
          </div>
        )}
      </header>

      <div className="flex h-screen">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <nav className="w-64 bg-gray-800 border-r border-gray-700 p-4">
          <div className="space-y-2">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg text-left transition-colors ${
                  activeTab === tab.id 
                    ? 'bg-blue-600 text-white' 
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                }`}
              >
                <span className="text-xl">{tab.icon}</span>
                {tab.name}
              </button>
            ))}
          </div>
        </nav>

        {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <main className="flex-1 p-6 overflow-y-auto">
          {activeTab === 'spotify' && (
            <SpotifySettings 
              config={config.spotify}
              onChange={(field, value) => handleInputChange(`spotify.${field}`, value)}
              onAuth={handleSpotifyAuth}
            />
          )}
          
          {activeTab === 'behavior' && (
            <BehaviorSettings 
              config={config.behavior}
              onChange={(field, value) => handleInputChange(`behavior.${field}`, value)}
            />
          )}
          
          {activeTab === 'ui' && (
            <UISettings 
              config={config.ui}
              onChange={(field, value) => handleInputChange(`ui.${field}`, value)}
            />
          )}
          
          {activeTab === 'hotkeys' && (
            <HotkeySettings 
              config={config.hotkeys}
              onChange={(field, value) => handleInputChange(`hotkeys.${field}`, value)}
            />
          )}
          
          {activeTab === 'advanced' && (
            <AdvancedSettings 
              config={config.advanced}
              onChange={(field, value) => handleInputChange(`advanced.${field}`, value)}
            />
          )}
        </main>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Spotify
const SpotifySettings = ({ config, onChange, onAuth }) => (
  <div className="space-y-6">
    <h2 className="text-3xl font-bold mb-6">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Spotify</h2>
    
    <div className="bg-gray-800 rounded-lg p-6">
      <h3 className="text-xl font-semibold mb-4">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Spotify</h3>
      
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">Client ID</label>
          <input
            type="text"
            value={config.clientId || ''}
            onChange={(e) => onChange('clientId', e.target.value)}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="–í–≤–µ–¥–∏—Ç–µ Spotify Client ID"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-2">Client Secret (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
          <input
            type="password"
            value={config.clientSecret || ''}
            onChange={(e) => onChange('clientSecret', e.target.value)}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="–í–≤–µ–¥–∏—Ç–µ Spotify Client Secret"
          />
        </div>
        
        <button
          onClick={onAuth}
          className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
        >
          –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Spotify
        </button>
        
        <div className="mt-4 p-4 bg-blue-900 bg-opacity-50 rounded-lg">
          <h4 className="font-semibold mb-2">–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Client ID:</h4>
          <ol className="list-decimal list-inside text-sm space-y-1 text-gray-300">
            <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href="https://developer.spotify.com/dashboard" target="_blank" rel="noopener noreferrer" className="text-blue-400 underline">Spotify Developer Dashboard</a></li>
            <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
            <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
            <li>–î–æ–±–∞–≤—å—Ç–µ Redirect URI: http://localhost:8888/callback</li>
          </ol>
        </div>
      </div>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤–µ–¥–µ–Ω–∏—è
const BehaviorSettings = ({ config, onChange }) => (
  <div className="space-y-6">
    <h2 className="text-3xl font-bold mb-6">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è</h2>
    
    <div className="bg-gray-800 rounded-lg p-6">
      <h3 className="text-xl font-semibold mb-4">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</h3>
      
      <div className="space-y-4">
        <CheckboxSetting
          label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–ª–µ–µ—Ä –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ Spotify"
          checked={config.showOnMinimize}
          onChange={(value) => onChange('showOnMinimize', value)}
        />
        
        <CheckboxSetting
          label="–°–∫—Ä—ã–≤–∞—Ç—å –ø–ª–µ–µ—Ä –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ Spotify"
          checked={config.hideOnRestore}
          onChange={(value) => onChange('hideOnRestore', value)}
        />
        
        <CheckboxSetting
          label="–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å Windows"
          checked={config.autoStart}
          onChange={(value) => onChange('autoStart', value)}
        />
        
        <CheckboxSetting
          label="–ó–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–µ—Ä–Ω—É—Ç—ã–º –≤ —Ç—Ä–µ–π"
          checked={config.startMinimized}
          onChange={(value) => onChange('startMinimized', value)}
        />
        
        <CheckboxSetting
          label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
          checked={config.showNotifications}
          onChange={(value) => onChange('showNotifications', value)}
        />
      </div>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ UI
const UISettings = ({ config, onChange }) => (
  <div className="space-y-6">
    <h2 className="text-3xl font-bold mb-6">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h2>
    
    <div className="bg-gray-800 rounded-lg p-6">
      <h3 className="text-xl font-semibold mb-4">–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h3>
      
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">
            –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø–ª–µ–µ—Ä–∞: {Math.round(config.opacity * 100)}%
          </label>
          <input
            type="range"
            min="0.5"
            max="1"
            step="0.05"
            value={config.opacity}
            onChange={(e) => onChange('opacity', parseFloat(e.target.value))}
            className="w-full"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-2">
            –ú–∞—Å—à—Ç–∞–± –ø–ª–µ–µ—Ä–∞: {Math.round(config.scale * 100)}%
          </label>
          <input
            type="range"
            min="0.5"
            max="2"
            step="0.1"
            value={config.scale}
            onChange={(e) => onChange('scale', parseFloat(e.target.value))}
            className="w-full"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-2">–ü–æ–∑–∏—Ü–∏—è –ø–ª–µ–µ—Ä–∞</label>
          <select
            value={config.position}
            onChange={(e) => onChange('position', e.target.value)}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg"
          >
            <option value="center">–ü–æ —Ü–µ–Ω—Ç—Ä—É</option>
            <option value="top">–°–≤–µ—Ä—Ö—É</option>
            <option value="bottom">–°–Ω–∏–∑—É</option>
            <option value="custom">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è</option>
          </select>
        </div>
        
        <CheckboxSetting
          label="–í—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω"
          checked={config.alwaysOnTop}
          onChange={(value) => onChange('alwaysOnTop', value)}
        />
      </div>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
const HotkeySettings = ({ config, onChange }) => (
  <div className="space-y-6">
    <h2 className="text-3xl font-bold mb-6">–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h2>
    
    <div className="bg-gray-800 rounded-lg p-6">
      <h3 className="text-xl font-semibold mb-4">–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h3>
      
      <div className="space-y-4">
        <CheckboxSetting
          label="–í–∫–ª—é—á–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"
          checked={config.enabled}
          onChange={(value) => onChange('enabled', value)}
        />
        
        {config.enabled && (
          <div className="pl-6 space-y-3">
            <HotkeyInput
              label="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä"
              value={config.global.togglePlayer}
              onChange={(value) => onChange('global.togglePlayer', value)}
            />
            
            <HotkeyInput
              label="Play/Pause"
              value={config.global.playPause}
              onChange={(value) => onChange('global.playPause', value)}
            />
            
            <HotkeyInput
              label="–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"
              value={config.global.nextTrack}
              onChange={(value) => onChange('global.nextTrack', value)}
            />
            
            <HotkeyInput
              label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"
              value={config.global.previousTrack}
              onChange={(value) => onChange('global.previousTrack', value)}
            />
          </div>
        )}
      </div>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
const AdvancedSettings = ({ config, onChange }) => (
  <div className="space-y-6">
    <h2 className="text-3xl font-bold mb-6">–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
    
    <div className="bg-gray-800 rounded-lg p-6">
      <h3 className="text-xl font-semibold mb-4">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
      
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">
            –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {config.pollingInterval}–º—Å
          </label>
          <input
            type="range"
            min="500"
            max="5000"
            step="100"
            value={config.pollingInterval}
            onChange={(e) => onChange('pollingInterval', parseInt(e.target.value))}
            className="w-full"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-2">–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</label>
          <select
            value={config.logLevel}
            onChange={(e) => onChange('logLevel', e.target.value)}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg"
          >
            <option value="error">–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏</option>
            <option value="warn">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏</option>
            <option value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</option>
            <option value="debug">–û—Ç–ª–∞–¥–∫–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ)</option>
          </select>
        </div>
        
        <CheckboxSetting
          label="–ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ"
          checked={config.hardwareAcceleration}
          onChange={(value) => onChange('hardwareAcceleration', value)}
        />
        
        <CheckboxSetting
          label="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"
          checked={config.enableDebugMode}
          onChange={(value) => onChange('enableDebugMode', value)}
        />
      </div>
    </div>
  </div>
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const CheckboxSetting = ({ label, checked, onChange }) => (
  <label className="flex items-center space-x-3">
    <input
      type="checkbox"
      checked={checked}
      onChange={(e) => onChange(e.target.checked)}
      className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
    />
    <span>{label}</span>
  </label>
);

const HotkeyInput = ({ label, value, onChange }) => (
  <div className="flex items-center justify-between">
    <span className="text-sm">{label}</span>
    <input
      type="text"
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="px-3 py-1 bg-gray-700 border border-gray-600 rounded text-center min-w-[200px]"
      placeholder="Ctrl+Shift+P"
    />
  </div>
);

export default Settings;
